var e={d:(t,s)=>{for(var a in s)e.o(s,a)&&!e.o(t,a)&&Object.defineProperty(t,a,{enumerable:!0,get:s[a]})},o:(e,t)=>Object.prototype.hasOwnProperty.call(e,t)},t={};e.d(t,{A:()=>l});const s=e=>e.dataset.src,a=e=>{},o=()=>"svgify",n={},r=async(e=null,t={})=>{const r=(t.getClassName||o)(),l=`.${r}`;let c=[];e instanceof Element?"svg"!==e.tagName&&(c=e.classList.contains(r)?[e]:[...e.querySelectorAll(l)]):null===e&&(c=[...document.querySelectorAll(l)]),await Promise.all(c.map((e=>(async(e,t={})=>{try{const r=(t.getUrl||s)(e);r in n||(n[r]=(async(e,t)=>{const s=await fetch(e,{headers:t}),a=document.createElement("div");return s.ok&&200===s.status?(a.innerHTML=await s.text(),a.querySelector("svg")):null})(r,(t.getHeaders||a)(e)));const l=await n[r];if(l){const s=l.cloneNode(!0),a=(t.getClassName||o)();s.classList.add(...[...e.classList].filter((e=>e!==a))),e.replaceWith(s)}}catch(e){console.error(e)}})(e,t))))},l={svgify:r,observe:(e=null,t={})=>{const s=new MutationObserver((e=>{for(let s of e)s.addedNodes&&s.addedNodes.length>0&&s.addedNodes.forEach((e=>{e instanceof Element&&r(e,t)}))}));return s.observe(null===e?document.body:e,{childList:!0,subtree:!0}),s}};var c=t.A;export{c as default};